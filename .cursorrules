# Cursor Rules - Site de Casamento Ester & Luan

## Contexto do Projeto
Este é um site de casamento full-stack desenvolvido com Next.js 15, React 19, TypeScript e TailwindCSS. O projeto visa criar uma experiência digital completa para o casamento de Ester & Luan, incluindo confirmação de presença via tokens únicos, lista de presentes com PIX e área administrativa.

## Padrões de Código Estabelecidos

### Naming Conventions
- **Arquivos**: kebab-case (ex: `guest-form.tsx`, `pix-keys.ts`)
- **Componentes**: PascalCase (ex: `GuestForm`, `CountdownTimer`)
- **Variáveis/Funções**: camelCase (ex: `handleSubmit`, `guestData`)
- **Constantes**: UPPER_SNAKE_CASE (ex: `WEDDING_DATE`, `API_ENDPOINTS`)
- **Database**: snake_case para colunas, camelCase no código TypeScript

### Component Patterns
- **Early Returns**: Sempre usar early returns para melhor legibilidade
- **Custom Hooks**: Prefixo `use` para hooks customizados
- **Event Handlers**: Prefixo `handle` (ex: `handleClick`, `handleSubmit`)
- **Async Functions**: Sempre tipadas com Promise<T>

### File Organization
```
src/
├── app/                    # Next.js App Router
│   ├── (features)/        # Páginas públicas agrupadas
│   ├── admin/             # Área administrativa protegida
│   └── api/               # API Routes
├── components/
│   ├── ui/                # Componentes base (Shadcn)
│   └── roles/             # Componentes específicos por role
├── lib/                   # Utilitários e configurações
├── hooks/                 # Custom hooks
├── types/                 # Definições TypeScript
├── db/schema/             # Schema do banco de dados
└── data/                  # Dados estáticos
```

## Tecnologias e Preferências

### Stack Principal
- **Next.js 15**: App Router obrigatório
- **React 19**: Server/Client Components
- **TypeScript 5**: Tipagem estrita obrigatória
- **TailwindCSS 4**: Styling utilitário
- **Drizzle ORM**: Para PostgreSQL
- **NextAuth 5.0**: Autenticação
- **TanStack Query**: State management do servidor

### Formulários e Validação
- **React Hook Form**: Para todos os formulários
- **Zod**: Schemas de validação em arquivos separados
- **Padrão**: Criar arquivo `*-schema.ts` para cada formulário

Exemplo:
```typescript
// guest-schema.ts
export const guestFormSchema = z.object({
  name: z.string().min(2, 'Nome deve ter pelo menos 2 caracteres'),
  email: z.string().email('Email inválido'),
  phone: z.string().optional()
})

export type GuestFormValues = z.infer<typeof guestFormSchema>
```

### Styling Guidelines
- **TailwindCSS**: Sempre usar classes Tailwind, evitar CSS customizado
- **Classes Customizadas**: Apenas para componentes específicos do casamento
- **Responsividade**: Mobile-first approach
- **Acessibilidade**: Sempre incluir aria-labels, tabindex quando necessário

### API Patterns
- **RESTful**: Seguir convenções REST
- **Validação**: Zod em todas as APIs
- **Error Handling**: Sempre retornar status codes apropriados
- **Authentication**: Verificar sessão em rotas protegidas

Exemplo de API Route:
```typescript
export async function POST(request: Request) {
  try {
    const session = await getServerSession()
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }
    
    const body = await request.json()
    const validatedData = schema.parse(body)
    
    // Lógica da API
    
    return NextResponse.json(result)
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json({ error: error.errors }, { status: 400 })
    }
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
```

## Funcionalidades Específicas do Projeto

### Sistema de Tokens para Convidados
- Cada convidado tem um token UUID único
- URLs no formato `/confirmacao/[token]`
- Tokens nunca expiram (casamento é evento único)
- Validação de token em todas as operações relacionadas

### Integração PIX
- Chaves PIX armazenadas na tabela `pix_keys`
- QR Codes gerados dinamicamente
- Sistema de "marcar como comprado" para presentes
- Não processar pagamentos reais (apenas marcação manual)

### Área Administrativa
- Proteção via NextAuth middleware
- Role-based access (apenas admins)
- CRUD completo para todas as entidades
- Dashboard com estatísticas em tempo real

## Padrões de Segurança

### Autenticação
- NextAuth 5.0 com provider credentials
- Senhas hasheadas com bcrypt
- Sessões JWT com rotação automática
- Middleware para proteção de rotas

### Validação de Dados
- Zod schemas para todas as entradas
- Sanitização de dados de upload
- Validação tanto no cliente quanto no servidor
- Rate limiting para APIs públicas (quando necessário)

## Performance Guidelines

### Otimizações Next.js
- Server Components por padrão
- Client Components apenas quando necessário
- Image optimization com next/image
- Dynamic imports para componentes pesados

### Database
- Indexes em campos de busca frequente
- Connection pooling configurado
- Prepared statements via Drizzle
- Paginação para listas grandes

### Caching
- TanStack Query para cache do cliente
- Next.js cache para páginas estáticas
- Revalidação estratégica de dados

## Convenções de UI/UX

### Design System
- Cores do tema: wedding-primary, wedding-secondary, wedding-accent
- Tipografia: Font system do Tailwind
- Espaçamento: Escala padrão do Tailwind (4, 8, 16, 24, 32...)
- Breakpoints: sm, md, lg, xl, 2xl

### Componentes Reutilizáveis
- Sempre usar Shadcn/UI como base
- Customizar apenas quando necessário
- Manter consistência visual
- Documentar variantes em comentários

### Estados de Loading
- Skeleton loaders para conteúdo
- Spinners para ações
- Disabled states para formulários
- Error boundaries para componentes críticos

## Debugging e Desenvolvimento

### Ferramentas Recomendadas
- **Drizzle Studio**: Visualização do banco
- **TanStack Query DevTools**: Debug de queries
- **Next.js DevTools**: Performance e debugging
- **React DevTools**: Componentes e estado

### Logging
- Console.log apenas em desenvolvimento
- Structured logging para produção
- Error tracking para problemas críticos
- Performance monitoring para APIs

## Deployment e Environment

### Environment Variables
```bash
# Obrigatórias
DATABASE_URL=
AUTH_SECRET=
AUTH_URL=

# Opcionais
ADMIN_EMAIL=
ADMIN_PASSWORD=
```

### Docker
- Multi-stage build configurado
- Health checks implementados
- Volume mounts para persistência
- Environment variables via docker-compose

## Notas Importantes

### Contexto do Casamento
- **Data**: 12 de Setembro de 2025
- **Noivos**: Ester & Luan
- **Local**: Espaço Villa Jardim
- **Tema**: Elegante e moderno

### Funcionalidades Críticas
1. **Confirmação de Presença**: Sistema de tokens único
2. **Lista de Presentes**: Integração PIX essencial
4. **Admin**: Controle total para os noivos

### Próximas Prioridades
1. Implementar sistema de confirmação via token
2. Completar integração PIX para presentes
3. Desenvolver dashboard administrativo

## Memory Bank
Este projeto utiliza um Memory Bank completo localizado em `/memory-bank/` com documentação detalhada sobre:
- Project Brief
- Product Context  
- System Patterns
- Tech Context
- Active Context
- Progress Tracking

Sempre consultar o Memory Bank antes de fazer mudanças significativas no projeto. 